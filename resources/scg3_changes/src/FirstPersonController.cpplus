#include <iostream>
#include "scg_glew.h"
#include <GLFW/glfw3.h>
#include "Camera.h"
#include "FirstPersonController.h"
#include "scg_glm.h"
#include "ViewState.h"

namespace scg {


FirstPersonController::FirstPersonController(CameraSP camera): CameraController(camera) {
  moveVelocity_ = 7.0f;
  rotateVelocity_ = 90.0f;

  std::cout << "Keyboard camera control enabled" << std::endl;
  std::cout << "- arrow keys: rotate around yaws" << std::endl;
  std::cout << "- w/s: move forward/backward" << std::endl;
  std::cout << "- a/d: move left/right" << std::endl;
  std::cout << std::endl;
}


FirstPersonController::~FirstPersonController() {
}


FirstPersonControllerSP FirstPersonController::create(CameraSP camera) {
  return std::make_shared<FirstPersonController>(camera);
}


void FirstPersonController::checkInput(ViewState* viewState) {
  // initialize controller state
  static double lastTime(glfwGetTime());
  GLFWwindow* window = viewState->getWindow();

  // determine time difference
  double currTime = glfwGetTime();
  GLfloat diffTime = static_cast<GLfloat>(currTime - lastTime);
  lastTime = currTime;

  // camera movement
  if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS) {
	camera_->translate(glm::vec3(0.0f, 0.0f, -moveVelocity_ * diffTime));
  }
  if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS) {
    camera_->translate(glm::vec3(0.0f, 0.0f, moveVelocity_ * diffTime));
  }
  if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS) {
    camera_->translate(glm::vec3(-moveVelocity_ * diffTime, 0.0f, 0.0f));
  }
  if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS) {
    camera_->translate(glm::vec3(moveVelocity_ * diffTime, 0.0f, 0.0f));
  }

  // camera rotation
  if (glfwGetKey(window, GLFW_KEY_LEFT) == GLFW_PRESS) {
    camera_->rotateYaw(rotateVelocity_ * diffTime);
  }
  if (glfwGetKey(window, GLFW_KEY_RIGHT) == GLFW_PRESS) {
    camera_->rotateYaw(-rotateVelocity_ * diffTime);
  }

  if (glfwGetKey(window, GLFW_KEY_UP) == GLFW_PRESS) {
	// TODO look up, but don't move in this direction
  }

  if (glfwGetKey(window, GLFW_KEY_DOWN) == GLFW_PRESS) {
    // TODO look down, but don't move in this direction
  }

  // toggle line/fill mode
  static bool toggleKeyL = false;
  if (glfwGetKey(window, GLFW_KEY_L) == GLFW_PRESS && !toggleKeyL) {
    static bool isLineMode = false;
    isLineMode = !isLineMode;
    isLineMode ?
        glPolygonMode(GL_FRONT_AND_BACK, GL_LINE) :
        glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
    toggleKeyL = true;
  }
  if (glfwGetKey(window, GLFW_KEY_L) == GLFW_RELEASE) {
    toggleKeyL = false;
  }
}


} /* namespace scg */
